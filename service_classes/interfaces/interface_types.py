from typing import Any, Protocol, Iterable, List, Union, Tuple
from pathlib import Path


class Record(Protocol):
    def __getitem__(self, field_name: str) -> Any: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __contains__(self, field_name: str) -> bool: ...
    def __iter__(self) -> Iterable: ...
    def clear(self) -> None: ...
    def copy(self) -> "Record": ...
    def get(self, field_name: str, default: Any = None) -> Any: ...
    def items(self) -> Iterable[Tuple[str, Any]]: ...
    def keys(self) -> Iterable[str]: ...
    def pop(self, field_name: str, default: Any = None) -> Any: ...
    def popitem(self) -> Tuple[str, Any]: ...
    def setdefault(self, field_name: str, default: Any = None) -> Any: ...
    def update(self, other: Union["Record", Iterable[Tuple[str, Any]]]) -> None: ...
    def values(self) -> Iterable[Any]: ...
    
class ValueList(Protocol):
    def sample(self, k: int) -> List: ...
    def get_parent_table(self) -> "Table": ...
    def get_field_name(self) -> str: ...
    def __eq__(self, selector: Any) -> "ValueList": ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Any: ...
    def append(self, value: Any) -> None: ...
    def extend(self, new_values: Iterable) -> None: ...
    def insert(self, index: int, value: Any) -> None: ...
    def remove(self, value: Any) -> None: ...
    def pop(self, index: int) -> Any: ...
    def clear(self) -> None: ...
    def index(self, value: Any, start: int = 0, stop: int = 0) -> int: ...
    def count(self, selector: Any) -> int: ...
    def sort(self, key=None, reverse=False) -> None: ...
    def reverse(self) -> None: ...
    def copy(self) -> "ValueList": ...
    def __iter__(self) -> Iterable: ...
    def __contains__(self, item: Any) -> bool: ...
    def __add__(self, other: "ValueList") -> "ValueList": ...

class Table(Protocol):
    def get_path(self) -> Path: ...
    def get_name(self) -> str: ...
    def iter(self) -> Iterable[Record]: ...
    def find(self, primary_key: Any) -> Record: ...
    def __getitem__(self, field_name: str) -> ValueList: ...
    def __str__(self) -> str: ...
    def __eq__(self, primary_key_selector: Any) -> "Table": ...
    def __ne__(self, primary_key_selector: Any) -> "Table": ...
    def __lt__(self, other: "Table") -> "Table": ...
    def __le__(self, primary_key_selector: Any) -> "Table": ...
    def __gt__(self, other: "Table") -> "Table": ...
    def __ge__(self, other: "Table") -> "Table": ...
    def __len__(self) -> int: ...
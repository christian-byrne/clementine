from typing import Any, Protocol, Iterable, List, Union, Tuple

class Record(Protocol):
    def __getitem__(self, field_name: str) -> Any: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __contains__(self, field_name: str) -> bool: ...
    def __iter__(self) -> Iterable: ...
    def clear(self) -> None: ...
    def copy(self) -> "Record": ...
    def get(self, field_name: str, default: Any = None) -> Any: ...
    def items(self) -> Iterable[Tuple[str, Any]]: ...
    def keys(self) -> Iterable[str]: ...
    def pop(self, field_name: str, default: Any = None) -> Any: ...
    def popitem(self) -> Tuple[str, Any]: ...
    def setdefault(self, field_name: str, default: Any = None) -> Any: ...
    def update(self, other: Union["Record", Iterable[Tuple[str, Any]]]) -> None: ...
    def values(self) -> Iterable[Any]: ...
    